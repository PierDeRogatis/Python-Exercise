# -*- coding: utf-8 -*-
"""
Created on Sat Feb  5  2022

@author: pierl
"""

'''
# 6. USING LISTS
# 6.1 LAKE SIZE COMPARISON
Aim to analyse an unsorted dataset of lakes.
First, I stored the values of lake sizes in a list. Then, I used the "max()" 
function to individuate the largest value in the list. After that, I used the 
"min()" function to individuate the smallest value in the list. Finally, I 
displayed the difference between the largest and smallest value.
'''

sizes = [8732, 5820, 9643, 9258, 8472, 6925, 2357, 8729, 5410, 5832,
         9825, 5445, 8293, 7822, 3854, 5784, 8752, 1987, 4982, 4582]

largest = max(sizes)
print("Largest lake in sq mi:")
print(largest)

smallest = min(sizes)
print("Smallest lake in sq mi:")
print(smallest)

difference = largest - smallest
print("Difference between lakes in sq mi:")
print(difference)


'''
# 6.2 CUSTOMER SERVICE QUEUE SYSTEM
Aim to sort a list of customers and assign them to the first available customer
service desks.
First, I stored two lists, one for the customers and one for the desks 
available. Then, I sorted the lists with the ".sort()" function, the customers
in alphabetical order while the desks in ascending order. After that, I 
displayed the name of the first customer and the name of the first available 
desk.
'''

customers = ["John", "Martina", "Ariah", "Elisabeth", "Sam", "Sarah", 
             "Ricardo", "Antonio"]
free_desks = [13, 5, 2, 19, 3, 11, 18, 5]

customers.sort()
free_desks.sort()

customer = customers[0]
desk = free_desks[0]

print(customer)
print("Visit desk:")
print(desk)


'''
# 6.3 TEAM SIZE CHECKER
Aim to use conditionals and list length to check teams sizes.
First, I created the lists for the squads. Then, I checked that the two teams
possess the same players' number. Finally, I displayed the number of rounds
left based on the number of players.
'''

team_A = ["Pavo", "Enrique", "Ricardo", "Victor"]
team_B = ["Anisha", "Farah", "Dimitria", "Ale"]

size_A = len(team_A)
size_B = len(team_B)

if size_A != size_B:
    print("Teams must have the same size to play")
else:
    print("Start the game")

if size_A == 4:
    print("Rounds left: 4")
elif size_A == 3:
    print("Rounds left: 3")
elif size_A == 2:
    print("Rounds left: 2")
else:
    print("Final round")


'''
# 6.4 PRODUCT RATINGS ANALYSIS
Aim to analyse a collection of product ratings
Firstly, I collected the ratings and analysed the length of them. Then, I 
counted the number of 5 level ratings and 1 level ratings using the 
".count()" function. After that, I listed the result in a list called 
"amounts", and I displayed the results.
'''

ratings = [5, 3, 4, 2, 5, 1, 2, 4, 1, 3, 5, 1, 1, 3, 2]
len(ratings)

five_rate = ratings.count(5)
one_rate = ratings.count(1)

amounts = [five_rate, one_rate]

print("Highest ratings:")
print(amounts[0])

print("Lowest ratings:")
print(amounts[1])



'''
# 7. USING LISTS
# 7.1 STOCK MANAGER
Aim to track an online firm's orders and stock.
First, I stored the value inside some objects. Then, I used the "f" function
to combine in a unique string both string values and integer (float)
values to display the number of tablets in stock, ordered, and available.
'''

stock = 35
item = "tablets"
orders = 9

print(f"{stock} {item} in stock")

print(f"{orders} customer orders")

print(f"{stock - orders} available")


'''
# 7.2 GAME DATA
Aim to keep track of data generated by players during round-based games.
Firstly, I stored the player's name and the round number. Then, I used the 
f-string to concatenate the player label with its name and I inserted a 
separator. After that, I displayed the number of rounds of the game. Finally, 
after storing the scores of each player, I printed the winner and a 
separator.
'''

player_A = "Samuel"
player_B = "Jeff"
current_round = 2

print("Game On!")
print(f"player A: {player_A}")
print(f"player B: {player_B}")
print("-------------------------------")

print(f"Round {current_round}:")
player_A_score = 18
player_B_score = 14
print(f"{player_A} wins with {player_A_score} to {player_B_score}")
print("-------------------------------")

'''
For the third round, I firstly displayed the number of the round. Then, I 
showed the scores of each player and the winner of the round. 
'''

print(f"Round {current_round + 1}:")
player_A_score = 16
player_B_score = 21
print(f"{player_B} defeats {player_A} by {player_B_score - player_A_score} points")
print("-------------------------------")


'''
# 7.3 TRANSFORMING DNA INTO RNA
Aim to transform DNA sequences into RNA sequences.
Firstly, I stored the sequences dividing them into four parts. Indeed, I used 
the ".split" function to divide the four parts when finding the character "#". 
After that, I used a for loop and the ".replace" function to substitute 
the letter t (thymine) into u (uracil). 
'''

sequence = "tatgccgtaa#aattggctca#tattcgatca#tcagattcgt"
list_dna = sequence.split("#")
print(list_dna)

for dna in list_dna:
    rna = dna.replace("t", "u")
    print(f"DNA {dna} -> RNA: {rna}")



'''
# 8. INTERMEDIATE PYTHON
# 8.1 MEMBERSHIP PROCESSOR
Aim to modify and arrange a membership sign-up form.
Firstly, I stored the value inserted by the user in the sign-up form. Then, I 
employed the "bool" function to give me a boolean value to insert in my "if" 
code block whether the user inserts a name or is unknown. Finally, I used 
different functions to convert the results into integers ("int") or floats 
("float"), and I also used the "bool" function with an integer since for the 0
value it will return False while for the 1 value it will return True. Finally,
I printed the name and age of the new member.  
'''

box_name = "Vladimir Rustov"
box_age = "35"
box_uni = ""
box_subs = "2.32"
box_market = "1"

entered_name = bool(box_name)
if entered_name:
    name = box_name
else:
    name = "Unknown"

age = int(box_age)
student = bool(box_uni)
subscription = float(box_subs)
marketing = bool(int(box_market))

profile = name + ',' + str(age)
print(profile)



'''
# 9. FUNCTIONS
# 9.1 MORSE ENCODER
Aim to convert numbers to Morse code.
Firstly, I created a function that converts the numbers into the Morse code. 
I will use the ".replace" function to replace the number in the Morse code.
Then, I  used the "return" option to send the results out to the caller.
Finally, I used the function to convert a list of numbers into Morse code.
'''

def convert_to_morse(code):
    code = code.replace("1", ".----")
    code = code.replace("2", "..---")
    code = code.replace("3", "...--")
    code = code.replace("4", "....-")
    code = code.replace("5", ".....")
    code = code.replace("6", "-....")
    code = code.replace("7", "--...")
    code = code.replace("8", "---..")
    code = code.replace("9", "----.")
    code = code.replace("0", "----'")
    return code

simple_code = "4 8 4 1 6 7"
print(f"Initial code: {simple_code}")

morse_code = convert_to_morse(simple_code)
print(f"Morse code: {morse_code}")


'''
# 9.2 FARE SPLIT CALCULATOR
Aim to create a calculator that split the fare between users.
Firstly, I created the function "split_fare" which contains three general 
arguments. Inside the code block, I inserted the share price for each 
passenger. Then, I added the cost feature for each one. Finally, I tried to 
run the function by inserting some vales.
'''

def split_fare (fare, passengers, cost_feature):
    share = fare/passengers
    print(f"Splitting the £{fare} fare between {passengers} passengers...")
    cost_shared = share + cost_feature
    print(f"Adding a £{cost_feature} feature costs...")
    return cost_shared

cost_fare = 54
passengers = 4
cost_feature = 1.2

cost_shared = split_fare(cost_fare, passengers, cost_feature)

print(f"Each pays: £{cost_shared}")


'''
# 9.3 COMMON FRIEND CHECKER
Aim to find if a user is a common friend amongst two other users.
Firstly, I defined my function "common_friend" with three general arguments. 
In the code block, I analysed, using the ".count" function, if the lists of 
friends of a user contained a particular name or not (>= 1 True or False). 
Then, I combined the two findings with the "&" operator to assess if both 
users have the same friend (True & True). Finally, I tried to call the function
creating two users with a list of friends. 
'''

def common_friend(user, friend_1, friend_2):
    is_friend_1 = friend_1.count(user) >= 1
    is_friend_2 = friend_2.count(user) >= 1
    is_common = is_friend_1 & is_friend_2
    return is_common

friends_dimitria = ["Ale", "Marty", "Ricky", "Ryan"]
friends_sarah = ["Giovanna", "Henry", "Samuel", "Ricky"]
common_ricky = common_friend("Ricky", friends_dimitria, friends_sarah)
print(f"Ricky is a common friend: {common_ricky}")


'''
# 9.4 CLASSES SCHEDULER
Aim to match a list of classes to available time slots.
Firstly, I defined the function "class_schedule". In the code block, I created
a list called "schedule[]" where insert the different classes. Then, I created
a while loop that, at every round, stored in the "scheduled_class" object one
class and its time. After that, I used the ".append()" function to insert the
scheduled_class object as the last element of the list. Afterwards, I add 1 to
the value of the index. Finally, I tried to call the function creating two
lists (one for classes and the other for times) and printing the result after
storing it in an object named "schedule". 
'''

def class_schedule(classes, times):
    schedule = []
    index = 0
    while index < len(classes):
        scheduled_class = classes[index] + ": " + times[index]
        schedule.append(scheduled_class)
        index += 1
    return schedule

classes = ["International Relations", "International Political Economy",
           "Quantitative Research", "Theories and Explanations in Politics"]
times = ["9:00 am", "11:00 am", "3:00 pm", "5:00 pm"]
schedule = class_schedule(classes, times)
print(f"Monday's schedule: {schedule}")
